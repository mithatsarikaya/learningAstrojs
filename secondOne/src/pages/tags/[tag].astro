---
import type {
  InferGetStaticParamsType,
  InferGetStaticPropsType,
  GetStaticPaths,
} from "astro";
import BaseLayout from "../../layouts/BaseLayout.astro";
import BlogPost from "../../components/BlogPost.astro";

export async function getStaticPaths(): Promise<any> {
  const allPosts = await Astro.glob("../posts/*.md");

  //Your tag pages are now defined statically in [tag].astro. If you add a new tag to a blog post, you will also have to revisit this page and update your page routes.

  //TODOne: make this tags dynamic

  //TODO: check for every 'any' type here

  //
  let allUniqueTags = [
    ...new Set(
      allPosts
        .map((post: any) => post.frontmatter.tags)
        .reduce((tot, cur: any) => tot.concat(cur), [])
    ),
  ];

  return allUniqueTags.map((tag) => ({
    params: {
      tag,
    },
    props: {
      posts: allPosts,
    },
  }));

  type Params = InferGetStaticParamsType<typeof getStaticPaths>;
  type Props = InferGetStaticPropsType<typeof getStaticPaths>;

  // return [
  //   { params: { tag: "astro" }, props: { posts: allPosts } },
  //   { params: { tag: "successes" }, props: { posts: allPosts } },
  //   { params: { tag: "community" }, props: { posts: allPosts } },
  //   { params: { tag: "blogging" }, props: { posts: allPosts } },
  //   { params: { tag: "setbacks" }, props: { posts: allPosts } },
  //   { params: { tag: "learning in public" }, props: { posts: allPosts } },
  // ];
}

const { tag } = Astro.params;
const { posts } = Astro.props;
const filteredPosts = posts.filter((post: any) =>
  post.frontmatter.tags?.includes(tag)
);
---

<BaseLayout pageTitle={tag}>
  <p>Posts tagged with {tag}</p>
  <ul>
    {
      filteredPosts.map((post: any) => (
        <BlogPost url={post.url} title={post.frontmatter.title} />
      ))
    }
  </ul>
</BaseLayout>
